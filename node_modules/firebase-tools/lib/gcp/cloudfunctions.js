"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.listAllFunctions = exports.listFunctions = exports.deleteFunction = exports.updateFunction = exports.setIamPolicy = exports.createFunction = exports.generateUploadUrl = exports.DEFAULT_PUBLIC_POLICY = exports.API_VERSION = void 0;
const clc = require("cli-color");
const api = require("../api");
const error_1 = require("../error");
const logger_1 = require("../logger");
const utils = require("../utils");
const proto = require("./proto");
exports.API_VERSION = "v1";
exports.DEFAULT_PUBLIC_POLICY = {
    version: 3,
    bindings: [
        {
            role: "roles/cloudfunctions.invoker",
            members: ["allUsers"],
        },
    ],
};
function validateFunction(func) {
    proto.assertOneOf("Cloud Function", func, "sourceCode", "sourceArchiveUrl", "sourceRepository", "sourceUploadUrl");
    proto.assertOneOf("Cloud Function", func, "trigger", "httpsTrigger", "eventTrigger");
}
function functionsOpLogReject(funcName, type, err) {
    var _a, _b;
    if (((_b = (_a = err === null || err === void 0 ? void 0 : err.context) === null || _a === void 0 ? void 0 : _a.response) === null || _b === void 0 ? void 0 : _b.statusCode) === 429) {
        utils.logWarning(`${clc.bold.yellow("functions:")} got "Quota Exceeded" error while trying to ${type} ${funcName}. Waiting to retry...`);
    }
    else {
        utils.logWarning(clc.bold.yellow("functions:") + " failed to " + type + " function " + funcName);
    }
    throw new error_1.FirebaseError(`Failed to ${type} function ${funcName}`, {
        original: err,
        context: { function: funcName },
    });
}
async function generateUploadUrl(projectId, location) {
    const parent = "projects/" + projectId + "/locations/" + location;
    const endpoint = "/" + exports.API_VERSION + "/" + parent + "/functions:generateUploadUrl";
    try {
        const res = await api.request("POST", endpoint, {
            auth: true,
            json: false,
            origin: api.functionsOrigin,
            retryCodes: [503],
        });
        const responseBody = JSON.parse(res.body);
        return responseBody.uploadUrl;
    }
    catch (err) {
        logger_1.logger.info("\n\nThere was an issue deploying your functions. Verify that your project has a Google App Engine instance setup at https://console.cloud.google.com/appengine and try again. If this issue persists, please contact support.");
        throw err;
    }
}
exports.generateUploadUrl = generateUploadUrl;
async function createFunction(cloudFunction) {
    const apiPath = cloudFunction.name.substring(0, cloudFunction.name.lastIndexOf("/"));
    const endpoint = `/${exports.API_VERSION}/${apiPath}`;
    try {
        const res = await api.request("POST", endpoint, {
            auth: true,
            data: cloudFunction,
            origin: api.functionsOrigin,
        });
        return {
            name: res.body.name,
            type: "create",
            done: false,
        };
    }
    catch (err) {
        throw functionsOpLogReject(cloudFunction.name, "create", err);
    }
}
exports.createFunction = createFunction;
async function setIamPolicy(options) {
    const endpoint = `/${exports.API_VERSION}/${options.name}:setIamPolicy`;
    try {
        await api.request("POST", endpoint, {
            auth: true,
            data: {
                policy: options.policy,
                updateMask: Object.keys(options.policy).join(","),
            },
            origin: api.functionsOrigin,
        });
    }
    catch (err) {
        throw new error_1.FirebaseError(`Failed to set the IAM Policy on the function ${options.name}`, {
            original: err,
        });
    }
}
exports.setIamPolicy = setIamPolicy;
async function updateFunction(cloudFunction) {
    const endpoint = `/${exports.API_VERSION}/${cloudFunction.name}`;
    const fieldMasks = proto.fieldMasks(cloudFunction, "labels", "environmentVariables");
    try {
        const res = await api.request("PATCH", endpoint, {
            qs: {
                updateMask: fieldMasks.join(","),
            },
            auth: true,
            data: cloudFunction,
            origin: api.functionsOrigin,
        });
        return {
            done: false,
            name: res.body.name,
            type: "update",
        };
    }
    catch (err) {
        throw functionsOpLogReject(cloudFunction.name, "update", err);
    }
}
exports.updateFunction = updateFunction;
async function deleteFunction(name) {
    const endpoint = `/${exports.API_VERSION}/${name}`;
    try {
        const res = await api.request("DELETE", endpoint, {
            auth: true,
            origin: api.functionsOrigin,
        });
        return {
            done: false,
            name: res.body.name,
            type: "delete",
        };
    }
    catch (err) {
        throw functionsOpLogReject(name, "delete", err);
    }
}
exports.deleteFunction = deleteFunction;
async function list(projectId, region) {
    const endpoint = "/" + exports.API_VERSION + "/projects/" + projectId + "/locations/" + region + "/functions";
    try {
        const res = await api.request("GET", endpoint, {
            auth: true,
            origin: api.functionsOrigin,
        });
        if (res.body.unreachable && res.body.unreachable.length > 0) {
            logger_1.logger.debug(`[functions] unable to reach the following regions: ${res.body.unreachable.join(", ")}`);
        }
        return {
            functions: res.body.functions || [],
            unreachable: res.body.unreachable || [],
        };
    }
    catch (err) {
        logger_1.logger.debug("[functions] failed to list functions for " + projectId);
        logger_1.logger.debug(`[functions] ${err === null || err === void 0 ? void 0 : err.message}`);
        return Promise.reject(err === null || err === void 0 ? void 0 : err.message);
    }
}
async function listFunctions(projectId, region) {
    const res = await list(projectId, region);
    return res.functions;
}
exports.listFunctions = listFunctions;
async function listAllFunctions(projectId) {
    return list(projectId, "-");
}
exports.listAllFunctions = listAllFunctions;
